script.
    // LearnComponent.pug
    import LanguageSelectorComponent from "./LanguageSelectorComponent.pug"
    import ShowSelectorComponent from "./ShowSelectorComponent.pug"
    import {Util} from "./Util"
    
    let lang 
    let showId

    let languages = []
    let shows = []

    let sentences = [
        "This is a test sentence for learning English. I'm no dummy!",
        "this is just another trial sentence"
    ]

    let selSentence = sentences[0]

    let selSentenceArr = selSentence.split(" ")

    let maxHidden = 3
    let hiddenArr = []
    let choiceArr = []
    let words = []

    const cleanWord = (str) => str.replace(/[^a-zA-Z,']+/, "").toLowerCase()

    const lessonReady = () => !!(lang && showId)
    const langReady = () => (!lessonReady()) || lang

    const init = () => {
        lang = Util.URLUtil.getParam("lang")
        showId = Util.URLUtil.getParam("showId")

        Util.ServiceUtil.loadData("../data/languages.json", true).then(data => {
            if(data && data.length) languages = data
        })

        Util.ServiceUtil.loadData("../data/shows.json", true).then(data => {
            if(data && data.length) shows = data
        })

        for(let i=0; i<sentences.length; i++) {
            let s = sentences[i] 
            let tmpWords = s.split(" ").map(el => cleanWord(el).toLowerCase())

            words = Array.from(new Set(words.concat(tmpWords))) 
        }

        console.log("words", words)

        while(hiddenArr.length != maxHidden) {
            let idx = Math.floor(Math.random() * selSentenceArr.length); 
            hiddenArr.push(idx)

            hiddenArr = Array.from(new Set(hiddenArr))
        }

        hiddenArr.map(elIdx => choiceArr.push(cleanWord(selSentenceArr[elIdx])))

        while(choiceArr.length != maxHidden*2) {
            choiceArr.push(cleanWord(words[Math.floor(Math.random() * words.length)]))
            choiceArr = Array.from(new Set(choiceArr))
        }

        console.log("lesson ready", lessonReady())
    }

    init()


section.learn-component
    h1 Learn {lang} from {showId}.

    div( class="{lessonReady() ? 'hidden' : '' }")
        {#if !lang }
          LanguageSelectorComponent(languages="{languages}")
        {#if lang }
          ShowSelectorComponent(shows="{shows}" selLang="{lang}") {lang}

    {#if lessonReady()}
      section.learn(class="{ lessonReady() ? 'active' : 'hidden' }")
          section.sentence
            {#each selSentenceArr as word, i}
              {#if hiddenArr.indexOf(i) == -1}
                span {word}
              {:else}
                span.blank ...
          hr
          section.choices
            {#each choiceArr as word, i}
              span {word}

style.
    .sentence, .choices {
        display: flex;
        gap: 10px;
        font-size: 4vw;
        justify-content: center;
        flex-wrap: wrap;
    }

    .sentence span.blank,
    .choices span{
        min-width: 75px;
        text-align: center;
        background-color: lightgray;
        border: 1px solid darkgray;
        border-radius: 4px;
        padding: 0 5px;
    }

    .choices span {
        background-color: #fff9c4;
    }